
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/validation/plot_beta_SMF28.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_validation_plot_beta_SMF28.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_validation_plot_beta_SMF28.py:


Propagation constant: DCFC
==========================

.. GENERATED FROM PYTHON SOURCE LINES 7-9

Imports
~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 9-18

.. code-block:: Python

    import numpy
    from SuPyMode.workflow import Workflow, fiber_catalogue, Boundaries
    from PyFiberModes import LP01
    from PyFiberModes.fiber import load_fiber
    from MPSPlots.render2D import SceneList

    wavelength = 1550e-9
    fiber_name = 'SMF28'








.. GENERATED FROM PYTHON SOURCE LINES 19-22

Generating the fiber structure
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here we define the cladding and fiber structure to model the problem

.. GENERATED FROM PYTHON SOURCE LINES 22-27

.. code-block:: Python

    fiber_list = [
        fiber_catalogue.load_fiber(fiber_name, wavelength=wavelength)
    ]









.. GENERATED FROM PYTHON SOURCE LINES 28-29

Defining the boundaries of the system

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: Python

    boundaries = [
        Boundaries(right='symmetric', bottom='symmetric'),
        Boundaries(right='symmetric', bottom='anti-symmetric')
    ]








.. GENERATED FROM PYTHON SOURCE LINES 35-38

Generating the computing workflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Workflow class to define all the computation parameters before initializing the solver

.. GENERATED FROM PYTHON SOURCE LINES 38-59

.. code-block:: Python

    workflow = Workflow(
        fiber_list=fiber_list,          # List of fiber to be added in the mesh, the order matters.
        fusion_degree='auto',           # Degree of fusion of the structure if applicable.
        wavelength=wavelength,          # Wavelength used for the mode computation.
        resolution=50,                 # Number of point in the x and y axis [is divided by half if symmetric or anti-symmetric boundaries].
        x_bounds="left",                # Mesh x-boundary structure.
        y_bounds="top",                 # Mesh y-boundary structure.
        boundaries=boundaries,          # Set of symmetries to be evaluated, each symmetry add a round of simulation
        n_sorted_mode=6,                # Total computed and sorted mode.
        n_added_mode=4,                 # Additional computed mode that are not considered later except for field comparison [the higher the better but the slower].
        plot_geometry=True,             # Plot the geometry mesh before computation.
        debug_mode=0,                   # Print the iteration step for the solver plus some other important steps.
        auto_label=True,                # Auto labeling the mode. Label are not always correct and should be verified afterwards.
        itr_final=0.2,                  # Final value of inverse taper ratio to simulate
        index_scrambling=0,             # Scrambling of refractive index value in order to lift mode degeneracy [useful for some analysis]
        n_step=50
    )

    superset = workflow.get_superset()
    itr_list = superset.itr_list




.. image-sg:: /gallery/validation/images/sphx_glr_plot_beta_SMF28_001.png
   :alt: , Fiber structure, Rasterized mesh, Refractive index gradient
   :srcset: /gallery/validation/images/sphx_glr_plot_beta_SMF28_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-61

Computing the analytical values using FiberModes solver.

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: Python

    dcf_fiber = load_fiber(
        fiber_name=fiber_name,
        wavelength=wavelength,
        add_air_layer=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 68-69

Preparing the figure

.. GENERATED FROM PYTHON SOURCE LINES 69-114

.. code-block:: Python

    figure = SceneList(unit_size=(12, 4))

    ax = figure.append_ax(
        x_label='Inverse taper ratio',
        y_label='Effective index',
        show_legend=True,
        font_size=18,
        tick_size=15,
        legend_font_size=18
    )

    pyfibermodes_mode = LP01
    supymode_mode = superset.LP01

    analytical = numpy.empty(itr_list.shape)
    for idx, itr in enumerate(itr_list):
        _fiber = dcf_fiber.scale(factor=itr)
        analytical[idx] = _fiber.get_effective_index(mode=pyfibermodes_mode)

    ax.add_line(
        x=itr_list,
        y=analytical,
        label=pyfibermodes_mode,
        line_style='-',
        line_width=2,
        color='red',
        layer_position=1
    )

    ax.add_scatter(
        x=itr_list,
        y=supymode_mode.index.get_values(),
        label=supymode_mode,
        color='black',
        line_width=2,
        edge_color='blue',
        marker_size=80,
        line_style='-',
        layer_position=2
    )

    _ = figure.show()


    # -



.. image-sg:: /gallery/validation/images/sphx_glr_plot_beta_SMF28_002.png
   :alt: plot beta SMF28
   :srcset: /gallery/validation/images/sphx_glr_plot_beta_SMF28_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.975 seconds)


.. _sphx_glr_download_gallery_validation_plot_beta_SMF28.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_beta_SMF28.ipynb <plot_beta_SMF28.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_beta_SMF28.py <plot_beta_SMF28.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
